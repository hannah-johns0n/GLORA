<%- include('../partials/admin/header') %>

  <main class="col-md-10 ms-sm-auto col-lg-10 px-md-4">
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
      <h1 class="mb-3 mb-md-0">Customer List</h1>
      <div class="d-flex gap-2">
        <button class="btn btn-outline-secondary mb-3 mb-md-0" onclick="exportCustomerData()">
          <i class="bi bi-download"></i> Export Data
        </button>
      </div>
    </div>

    <div class="table-responsive">
      <table class="table table-striped table-hover table-bordered mt-3">
        <thead class="table-dark">
          <tr>
            <th scope="col">Name</th>
            <th scope="col">Email</th>
            <th scope="col">Phone</th>
            <th scope="col">Joined Date</th>
            <th scope="col">Status</th>
            <th scope="col">Actions</th>
          </tr>
        </thead>

        <tbody>
          <% customers.forEach(customer=> { %>
            <tr>
              <td>
                <%= customer.name %>
              </td>
              <td>
                <%= customer.email %>
              </td>
              <td>
                <%= customer.phone || 'N/A' %>
              </td>
              <td>
                <% let joinedDate='N/A' ; try { if (customer.createdAt) { joinedDate=new
                  Date(customer.createdAt).toLocaleDateString('en-IN', { year: 'numeric' , month: '2-digit' ,
                  day: '2-digit' }); } } catch(e) { console.error('Error formatting date:', e); } %>
                  <%= joinedDate %>
              </td>
              <td class="text-center">
                <span class="badge <%= !customer.isBlocked ? 'bg-success' : 'bg-danger' %>">
                  <%= !customer.isBlocked ? 'Active' : 'Blocked' %>
                </span>
              </td>
              <td class="text-center">
                <button
                  onclick="handleCustomerAction(this, '<%= customer._id %>', <%= !customer.isBlocked ? 'true' : 'false' %>)"
                  class="btn btn-sm <%= !customer.isBlocked ? 'btn-danger' : 'btn-success' %>">
                  <%= !customer.isBlocked ? 'Block' : 'Unblock' %>
                </button>
              </td>
            </tr>
            <% }); %>
        </tbody>
      </table>
    </div>

    <nav aria-label="Page navigation">
      <ul class="pagination justify-content-center">
        <% for (let i=1; i <=totalPages; i++) { %>
          <li class="page-item <%= i === currentPage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>">
              <%= i %>
            </a>
          </li>
          <% } %>
      </ul>
    </nav>

    
  </main>

  <%- include('../partials/admin/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      async function handleCustomerAction(button, customerId, isActive) {
        const action = isActive === 'true' ? 'block' : 'unblock';
        const buttonText = button.innerHTML;

        try {
          button.disabled = true;
          button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';

          const result = await Swal.fire({
            title: action === 'block' ? 'Are you sure you want to block this user?' : 'Are you sure you want to unblock this user?',
            text: action === 'block'
              ? 'Blocking will prevent this user from logging in.'
              : 'Unblocking will allow this user to log in again.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: action === 'block' ? 'Yes, Block User' : 'Yes, Unblock User',
            confirmButtonColor: action === 'block' ? '#dc3545' : '#198754',
            cancelButtonText: 'Cancel',
            reverseButtons: true,
            showLoaderOnConfirm: true,
            preConfirm: async () => {
              try {
                const response = await fetch(`/admin/user/${action}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({ id: customerId }),
                  credentials: 'same-origin'
                });

                const responseData = await response.json();

                if (!response.ok) {
                  throw new Error(responseData.message || `Failed to ${action} customer`);
                }

                return responseData;
              } catch (error) {
                Swal.showValidationMessage(`Request failed: ${error.message}`);
                return false;
              }
            },
            allowOutsideClick: () => !Swal.isLoading()
          });

          if (result.isConfirmed) {
            const statusBadge = button.closest('tr').querySelector('.badge');
            if (statusBadge) {
              if (action === 'block') {
                statusBadge.classList.remove('bg-success');
                statusBadge.classList.add('bg-danger');
                statusBadge.textContent = 'Blocked';
                button.classList.remove('btn-danger');
                button.classList.add('btn-success');
                button.setAttribute('onclick', `handleCustomerAction(this, '${customerId}', false)`);
                button.innerHTML = 'Unblock';
              } else {
                statusBadge.classList.remove('bg-danger');
                statusBadge.classList.add('bg-success');
                statusBadge.textContent = 'Active';
                button.classList.remove('btn-success');
                button.classList.add('btn-danger');
                button.setAttribute('onclick', `handleCustomerAction(this, '${customerId}', true)`);
                button.innerHTML = 'Block';
              }
            }

            await Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: `User has been ${action === 'block' ? 'blocked' : 'unblocked'} successfully.`,
              timer: 1500,
              timerProgressBar: true,
              showConfirmButton: false
            });
          }
        } catch (error) {
          console.error('Error:', error);
          await Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'An error occurred while processing your request',
            confirmButtonText: 'OK'
          });
        } finally {
          if (button) {
            button.disabled = false;
            button.innerHTML = buttonText;
          }
        }
      }

      async function exportCustomerData() {
        const exportBtn = document.getElementById('exportBtn');
        const originalBtnText = exportBtn?.innerHTML;

        try {
          if (exportBtn) {
            exportBtn.disabled = true;
            exportBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Exporting...';
          }

          const response = await fetch('/admin/customers/export', {
            method: 'GET',
            headers: {
              'Accept': 'application/csv',
              'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin'
          });

          if (!response.ok) {
            const error = await response.text().catch(() => 'Export failed');
            throw new Error(error);
          }

          const contentDisposition = response.headers.get('content-disposition');
          const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
          const filename = filenameMatch ? filenameMatch[1].replace(/['"]/g, '') : 'customers.csv';

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          a.download = filename;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);

          await Swal.fire({
            icon: 'success',
            title: 'Export Successful',
            text: 'Customer data has been exported successfully.',
            showConfirmButton: false,
            timer: 1500
          });
        } catch (error) {
          console.error('Export error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Export Failed',
            text: error.message || 'Failed to export customer data'
          });
        }
      }
    </script>

    <style>
      .table thead th {
        color: #fff;
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
      }
    </style>